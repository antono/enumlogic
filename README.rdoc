= enumlogic

Allows you to easily specify enumerations for your models. Specify enumerations like:

    create_table :computers do |t|
      t.integer :kind
    end

    class Computer < ActiveRecord::Base
      # Enum as array
      enum :kind, ["apple", "dell", "hp"]
    end

    class Car < ActiveRecord::Base
      # Enum as hash
      enum :kind, {"tesla" => "Tesla Motors", "bmw" => "BMW", "moskvich" => "Moskvich"}
    end

You can now do the following:

    Computer::KINDS         # => [:apple, :dell, :hp]
                            # Constant name can be specified with :constant option

    Computer.kind_options   # gives you a friendly hash that you can easily pass into the select helper for forms

    Computer.new(:kind => "unknown").valid?
                            # => false
                            # automatically validates inclusion of the enum field

    c = Car.new(:kind => "tesla")

    Car.enum_int_for('tesla') # => 16736
    Car.enum_int_for(:tesla)  # => 16736

    c.tesla?        # => true
    c.kind_key      # => :tesla
    c.kind_int      # => Car.enum_int_for('tesla') => 16736
    c.kind_text     # => 'Tesla Motors'
    c.enum?(:kind)  # => true

All enum values are translated to numbers with Zlib.crc32() before save.

== Note on Patches/Pull Requests

* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2009 binarylogic.
Copyright (c) 2009 Antono Vasiljev.
See LICENSE for details.
